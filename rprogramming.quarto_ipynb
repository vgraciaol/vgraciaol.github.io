{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"R programming\"\n",
        "subtitle: \"Interactive Quarto Document using webR\"\n",
        "author: \"Valeria Gracia Olvera\"\n",
        "execute:\n",
        "  echo: true\n",
        "  error: true\n",
        "format:\n",
        "    html: \n",
        "      toc: true\n",
        "filters:\n",
        "  - webr\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "*References*:\n",
        "\n",
        "-   Davies, T. M. (2016). The book of R : a first course in programming and statistics. No Starch Press, San Francisco, CA, USA, 1st edition.\n",
        "\n",
        "-   `webR` extension for Quarto: [GitHub repository](https://github.com/coatless/quarto-webr)\n",
        "\n",
        "# Matrices and arrays\n",
        "\n",
        "## Matrix\n",
        "\n",
        "The `matrix` function have the following arguments:\n",
        "\n",
        "-   `data` in a form of a vector,\n",
        "\n",
        "-   `nrow` number of rows,\n",
        "\n",
        "-   `ncol` number of columns,\n",
        "\n",
        "-   `byrow` (logical) default is `FALSE` meaning that the matrix is filled by columns,\n",
        "\n",
        "-   `dimnames` a list of two elements containing the row and column names, respectively.\n",
        "\n",
        "### Example 1\n",
        "\n",
        "```{webr-r}\n",
        "m_A <- matrix(data = c(-3, 2, 83, 0.15), \n",
        "              nrow = 2,\n",
        "              ncol = 2)\n",
        "\n",
        "# Get matrix\n",
        "m_A\n",
        "```\n",
        "\n",
        "Note how `R` filled the matrix column-by-column since by default `byrow = FALSE`.\n",
        "\n",
        "### Example 2\n",
        "\n",
        "```{webr-r}\n",
        "m_A <- matrix(data = c(-3, 2, 83, 0.15))\n",
        "\n",
        "# Get matrix\n",
        "m_A\n",
        "```\n",
        "\n",
        "If `nrow` and `ncol` are not specified default is a single-column matrix.\n",
        "\n",
        "### Example 3\n",
        "\n",
        "```{webr-r}\n",
        "m_B <- matrix(data  = 1:6,\n",
        "              nrow  = 2,\n",
        "              ncol  = 3,\n",
        "              byrow = TRUE)\n",
        "\n",
        "# Get matrix\n",
        "m_B\n",
        "```\n",
        "\n",
        "Note that the matrix's first row was filled out before moving on to the next one.\n",
        "\n",
        "### Example 4\n",
        "\n",
        "```{webr-r}\n",
        "# A named matrix\n",
        "m_C <- matrix(data  = 4:9,\n",
        "              nrow  = 2,\n",
        "              ncol  = 3,\n",
        "              byrow = TRUE,\n",
        "              dimnames = list(c(\"row1\",\"row2\"),\n",
        "                              c(\"column1\",\"column2\",\"column3\")))\n",
        "\n",
        "# Get matrix\n",
        "m_C\n",
        "```\n",
        "\n",
        "### Example 5\n",
        "\n",
        "```{webr-r}\n",
        "# Not enough data\n",
        "m_D <- matrix(data  = 1:4,\n",
        "              nrow  = 2,\n",
        "              ncol  = 3)\n",
        "\n",
        "# Get matrix\n",
        "m_D\n",
        "```\n",
        "\n",
        "If there is insufficient data to fill a matrix as specified by the user, the values will be **recycled**. This is important to note as it will not give an error, but a warning, and the matrix can still be used in other operations.\n",
        "\n",
        "## Sub-setting\n",
        "\n",
        "We can subset values from a matrix by indicating `matrix_name[row,column]`.\n",
        "\n",
        "-   If the matrix rows an columns have names the names can be used to subset.\n",
        "\n",
        "```{webr-r}\n",
        "m_C[1,] # first row, all columns\n",
        "m_C[,3] # third column, all rows\n",
        "m_C[\"row2\",\"column3\"] # second row, third column\n",
        "```\n",
        "\n",
        "-   If you leave the row (column) value blank, it will extract the entire column (row).\n",
        "\n",
        "## Operations with matrices\n",
        "\n",
        "-   `t()` transpose of a matrix.\n",
        "\n",
        "-   `diag()` extract or replace the diagonal of a matrix, or construct a diagonal matrix.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "    ```{webr}\n",
        "    # Get documentation on diag() function\n",
        "    ?diag \n",
        "    ```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "-   Equally sized matrices can be added and subtracted.\n",
        "\n",
        "-   `%*%` matrix multiplication same number of columns and rows.\n",
        "\n",
        "-   `solve()` returns the inverse of a matrix.\n",
        "\n",
        "# Arrays\n",
        "\n",
        "Arrays are very similar to matrices but can have more than 2 dimensions.\n",
        "\n",
        "## Example 1\n",
        "\n",
        "```{webr-r}\n",
        "a_R <- array(data=1:24,dim=c(3,4,2)) #returns an array with 3 rows, 4 columns and 2 layers\n",
        "                                    #filled colum-wise\n",
        "AR\n",
        "```\n",
        "\n",
        "# Conditionals\n",
        "\n",
        "# Loops\n",
        "\n",
        "# Writing functions\n",
        "\n",
        "## Examples\n",
        "\n",
        "### Example 1\n",
        "\n",
        "A function that simply assigns three different objects.\n",
        "\n",
        "```{webr-r}\n",
        "dummy1 <- function(){\n",
        "  aa <- 2.5\n",
        "  bb <- \"string\"\n",
        "  dd <- 4:8\n",
        "}\n",
        "```\n",
        "\n",
        "### Example 2\n",
        "\n",
        "A function with multiple returns.\n",
        "\n",
        "```{webr-r}\n",
        "dummy2 <- function(){\n",
        "  aa <- 2.5\n",
        "  bb <- \"string1\"\n",
        "  return(aa)\n",
        "  dd <- 4:8\n",
        "  return(bb)\n",
        "}\n",
        "```\n",
        "\n",
        "### Example 3\n",
        "\n",
        "A function with arguments.\n",
        "\n",
        "```{webr-r}\n",
        "get_sum <- function(a,b){\n",
        "  if(is.numeric(a) & is.numeric(b)){\n",
        "    return(a+b)\n",
        "  }\n",
        "  else{\n",
        "    return(NA)\n",
        "  }\n",
        "}\n",
        "```\n",
        "\n",
        "**Questions:**\n",
        "\n",
        "1.  Does a function always require arguments? When is it necessary for it to have arguments?\n",
        "\n",
        "2.  What happened if you run `dummy1()` and then get the object `aa`?\n",
        "\n",
        "3.  What happens if you run `bn <- dummy1()` and then get the object `bn`?\n",
        "\n",
        "4.  What value would `dummy2()` return?\n",
        "\n",
        "5.  How many `return` elements can a function have?\n",
        "\n",
        "### Example 4\n",
        "\n",
        "Ellipsis `...`\n",
        "\n",
        "```{webr-r}\n",
        "myplot_fun <- function(x,y,...){\n",
        "  if(length(x) != length(y)){\n",
        "    message(\"Error: vectors must be the same length\")\n",
        "  }\n",
        "  else{\n",
        "    plot(x,y,...)\n",
        "  }\n",
        "}\n",
        "\n",
        "myplot_fun(c(1,2,3,4),c(5,6,7,8))\n",
        "myplot_fun(c(1,2,3,4),c(5,6,7))\n",
        "myplot_fun(x = c(1,2,3,4), \n",
        "           y = c(5,6,7,8),\n",
        "           main = \"Plot in a function\",\n",
        "           col  = \"red\",\n",
        "           xlab = \"x-axis\",\n",
        "           ylab = \"y-axis\")\n",
        "```\n",
        "\n",
        "## Takeaways\n",
        "\n",
        "-   A list of arguments is not always required for a function to be executed.\n",
        "-   A function that does not have a `return` element technically returns nothing; but it implicitly returns the last line of code.\n",
        "-   A function can have multiple `return` elements, however, once it encounters a return, it exits.\n",
        "-   Ellipsis allows you to pass additional arguments without having to first define them in the argument list, and these arguments can then be passed to another function call within the body of the code."
      ],
      "id": "5aca56fd"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}